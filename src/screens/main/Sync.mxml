<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  width="100%" 
		  height="100%"
		  gap="0"
		  preinitialize="vgroup2_preinitializeHandler(event)"
		  creationComplete="vgroup2_creationCompleteHandler(event)"
		  xmlns:system="components.system.*" xmlns:components="flatspark.components.*">
	<fx:Script>
		<![CDATA[
			import com.coltware.airxzip.ZipEntry;
			import com.coltware.airxzip.ZipFileReader;
			
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			
			import classes.Globals;
			import classes.Model.BatchQuery;
			import classes.Model.Database;
			import classes.Model.ExternalData;
			import classes.Utils.GPSUtil;
			import classes.Utils.QueryConstructor;
			import classes.Utils.TextFile;
			
			import events.MainNavEvent;
			import events.Model.ExternalDataEvent;
			import events.Model.InsertProgressEvent;
			import events.Model.QueryEvent;
			import events.custom.CheckEvent;
			
			import flatspark.enums.BrandColorEnum;
			
			[Bindable] private var acLogMessages:ArrayCollection = new ArrayCollection();
			private var UPDATE_ARRAY:ArrayCollection;
			private var syncAC:ArrayCollection = new ArrayCollection();
			private var syncViewCount:Number = 0;
			private var syncTableName:String = "";
			private var tempQueryAC:ArrayCollection = new ArrayCollection();
			private var syncID:String = "";
			private var tryCount:int = 0;			
			private var syncCounter:int = 60;
			private var SYNC_TYPE:String = "";
			private var timer:Timer;
			private var adjArr:ArrayCollection;
			private var largeAdjustAC:ArrayCollection;
			private var imageAC:ArrayCollection = new ArrayCollection();
			private var imageCounter:int = 0;
			private var imageQnt:int = 0;
			[Bindable] private var fileListSD:ArrayCollection;
			private var sitePath:String = "";
			[Bindable] private var syncInProgress:Boolean = false;

			protected function vgroup2_preinitializeHandler(event:FlexEvent):void
			{
				stage.setAspectRatio(StageAspectRatio.PORTRAIT);
				txtRes.text = "Нажмите кнопку [Синхронизация] для начала синхронизации";
				Globals.readSystemProperties();
			}			
			
			/* ===============================================			
			START SYNC			
			=================================================*/	
			protected function btnSyncApplication_clickHandler(event:MouseEvent):void
			{
				// clear log
				acLogMessages.removeAll();
				syncInProgress = true;
				txtRes.text = "Синхронизация в процессе...";
				
				writeLog("Начало синхронизации. Авторизация пользователя");
				// call for IMEI
				var ed:ExternalData = new ExternalData("get_auth");
				ed.addEventListener(ExternalDataEvent.DATA_LOADED, imeiAuthLoaded,false,0,true);
				ed.getAuth(Globals.USE_IMEI);
			}			
			private function imeiAuthLoaded(event:ExternalDataEvent):void
			{
				if (event.hasError) {
					writeLog(event.errorText);
				} else {					
					writeLog("Отправка файла лога");
					sendLogFile();
				}
			}
			/* ===============================================			
			SEND LOG FILE			
			=================================================*/	
			private function sendLogFile():void
			{
				var ed:ExternalData = new ExternalData("sync_file_upload");
				ed.addEventListener(ExternalDataEvent.DATA_LOADED, sendLogFileHandler, false,0,true);
				ed.sendLogFile();
			}
			private function sendLogFileHandler(event:ExternalDataEvent):void
			{
				if (event.hasError) {
					writeLog(event.errorText);
				} else {	
					try // remove file
					{
						File.documentsDirectory.resolvePath("TSA_PROMO/" + event.data.getItemAt(0).FILENAME).deleteFile();
					} catch (err:Error) { trace(err.getStackTrace()); }
					
					writeLog("Запрос статуса синхронизации");
					getSyncStatus();
				}
			}
			/* ===============================================			
			GET SYNC STATUS			
			=================================================*/	
			private function getSyncStatus():void
			{
				var ed:ExternalData = new ExternalData("get_sync_status");
				ed.addEventListener(ExternalDataEvent.DATA_LOADED, getSyncStatusHandler, false,0,true);
				ed.getSyncStatus();
			}
			private function getSyncStatusHandler(event:ExternalDataEvent):void
			{
				if (event.hasError) {
					writeLog(event.errorText);
				} else {					
					checkLastSyncStatus((event.data.getItemAt(0).STATUS as String).substr(0,2));
				}
			}
			
			/* ===============================================			
			CHECK LAST SYNC STATUS			
			=================================================*/	
			private function checkLastSyncStatus(status:String):void
			{
				writeLog("Получен статус: " + status);
				if ((status == "03") || (status == "06")) {
					prepareUploadSyncData();
				} else {
					showServerError(status);
				}
			}
			
			private function showServerError(status:String):void
			{
				Globals.showOkDialog("Синхронизация","Попробуйте просинхронизироваться позже. Статус синхронизации [" + status + "]");
			}
			
			/* ===============================================			
			PREPARE AND SEND UPLOAD SYNC DATA		
			=================================================*/	
			
			private function prepareUploadSyncData():void
			{
				var ed:ExternalData = new ExternalData("sync_file_upload");
				ed.addEventListener(ExternalDataEvent.DATA_LOADED, sendUploadSyncFileHandler, false,0,true);
				ed.sendUploadSyncFile("F");
			}
			private function sendUploadSyncFileHandler(event:ExternalDataEvent):void
			{
				if (event.hasError) {
					writeLog(event.errorText);
				} else {					
					sendUnzipToServer(event.data.getItemAt(0).FILENAME);
				}
			}
			
			/* ===============================================			
			SEND UNZIP AND WRITE COMMAND TO SERVER		
			=================================================*/	
			
			private function sendUnzipToServer(zipFileName:String):void
			{
				writeLog("Отправка команды записи данных в базу");
				
				try // remove file
				{
					File.documentsDirectory.resolvePath("TSA_PROMO/" + zipFileName).deleteFile();
				} catch (err:Error) { trace(err.getStackTrace()); }
				
				var ed:ExternalData = new ExternalData("write_file_data");
				ed.addEventListener(ExternalDataEvent.DATA_LOADED, sendUnzipToServerHandler, false,0,true);
				ed.sendUnzipAndWrite(zipFileName);
			}
			private function sendUnzipToServerHandler(event:ExternalDataEvent):void
			{
				if (event.hasError) 
				{
					writeLog(event.errorText);
				} 
				else 
				{
					writeLog("STATUS_LISTENER");
					tryCount = 1;
					STATUS_LISTENER("UPLOAD");
				}
			}
			
			
			private function STATUS_LISTENER(_SYNC_TYPE:String):void
			{				
				SYNC_TYPE = _SYNC_TYPE;
				
				writeLog("Ожидание сервера (" + SYNC_TYPE + ") - попытка" + "  " + tryCount.toString());
				
				timer = new Timer(1000,1);
				timer.removeEventListener(TimerEvent.TIMER,getStatus);
				timer.addEventListener(TimerEvent.TIMER,getStatus);												
				timer.start();	
			}
			
			private function getStatus(e:TimerEvent):void
			{											
				var ed:ExternalData = new ExternalData("get_sync_status");
				ed.addEventListener(ExternalDataEvent.DATA_LOADED, checkServerStatusHandler, false,0,true);
				ed.getSyncStatus();
				
				timer.stop();
			}
			private function checkServerStatusHandler(event:ExternalDataEvent):void
			{
				if (event.hasError) 
				{
					writeLog("ОШИБКА: " + event.errorText);
				} 
				else 
				{
					if (event.data.length == 0) {
						var errorTitle:String = "Ошибка при получении статуса: LEN=0";
						var errorMsg:String = event.errorText;						
						Globals.showOkDialog(errorTitle, errorMsg);						
						writeLog(errorTitle + ": " + errorMsg);
					} else {
						if (event.data.getItemAt(0).hasOwnProperty("STATUS")) {
							tryStatus(event.data.getItemAt(0).STATUS as String);							
							trace("File " + SYNC_TYPE + " status: " + event.data.getItemAt(0).STATUS);
						} else {
							writeLog("Ошибка в ответе от сервера: не обнаружено поле STATUS");	
						}						
					}
				}
			}
			
			private function tryStatus(response:String):void
			{
				var status:String = response.substr(0,2);
				writeLog(SYNC_TYPE + " cтатус: " + "[" + status + "]" + " Попытка: " + tryCount.toString());

				if (SYNC_TYPE == "UPLOAD")
				{
					switch (status)
					{
						case "01" : handleWait(status);
							break;
						case "02" : handleWait(status);
							break;
						case "03" : UPLOAD_VISIT_PHOTOS();//CLEAR_REFERENCES();
							break;
						case "04" : showServerError(status);
							break;
						case "05" : showServerError(status);
							break;
						case "06" : showServerError(status);
							break;
						default	  : handleWait(status);
							break;
					}	
				}
				else
				{
					
					switch (status)
					{
						case "01" : showServerError(status);
							break;
						case "02" : showServerError(status);
							break;
						case "03" : showServerError(status);
							break;
						case "04" : handleWait(status);
							break;
						case "05" : handleWait(status);
							break;
						case "06" : LOAD_DATA_DONE(response);
							break;
						default	  : handleWait(status);
							break;
					}	
				}
			}
			
			private function handleWait(operation:String):void
			{
				writeLog("Состояние на сервере:" + " " + operation);

				if ((tryCount <= syncCounter) && (tryCount != 0))
				{
					tryCount++;
					STATUS_LISTENER(SYNC_TYPE);
				}
				else
				{
					showServerError(operation);
				}
			}
			
			/* ===============================================			
			UPLOAD PHOTOS FROM VISIT	
			=================================================*/	
			private function UPLOAD_VISIT_PHOTOS():void
			{
				writeLog("Отправка фото на сервер");
				
				var ed:ExternalData = new ExternalData("sync_photo_upload");
				ed.addEventListener(ExternalDataEvent.DATA_LOADED, sendVisitPhotosHandler, false,0,true);
				ed.sendVisitPhotos();
			}
			private function sendVisitPhotosHandler(event:ExternalDataEvent):void
			{
				if (event.hasError) {
					writeLog(event.errorText);
				} else {					
					CLEAR_REFERENCES();
				}
			}
			
			/* ===============================================			
			CLEAR TABLES	
			=================================================*/	
			private function CLEAR_REFERENCES():void
			{
				writeLog("Очистка справочников");
				
				timer.stop();
				timer.removeEventListener(TimerEvent.TIMER,getStatus);				
				UPDATE_ARRAY = null;
				
				adjArr = new ArrayCollection();
				
				for (var i:int=0;i<Globals.TABLES_TO_CLEAR.length;i++)
				{
					var bq:BatchQuery = new BatchQuery();
					bq.query = "DELETE FROM " + Globals.TABLES_TO_CLEAR[i];
					adjArr.addItem(bq);
				}
				
				Database.removeEventListener( CheckEvent.ADJUST_EVENT, CLEAR_REFERENCES_RESULT);
				Database.addEventListener(CheckEvent.ADJUST_EVENT, CLEAR_REFERENCES_RESULT, false, 0, true);
				Database.ADJUST(adjArr);
			}
			private function CLEAR_REFERENCES_RESULT(e:CheckEvent):void
			{
				Database.removeEventListener(CheckEvent.ADJUST_EVENT, CLEAR_REFERENCES_RESULT);
				adjArr = null;
				
				if (e.data > 0) {
					writeLog("Очистка справочников произведена");
					LOAD_MOBILE_DATA();
				} 
				else {
					writeLog("Ошибка очистки справочников\n" + e.text);
				}
			}
			
			/* ===============================================			
			REQUEST FOR SYNC FILE		
			=================================================*/	
			private function LOAD_MOBILE_DATA():void
			{
				var ed:ExternalData = new ExternalData("get_mobile_data");
				ed.getMobileData();
				
				tryCount = 1;
				STATUS_LISTENER("DOWNLOAD");
			}
			
			/* ===============================================			
			DONE WRITING FILE - REQUEST FOR SYNC FILE		
			=================================================*/	
			private function LOAD_DATA_DONE(response:String):void
			{
				var url:String = response.substr(2,response.length);
				writeLog("Начало загрузки: " + url);
				
				if (url.substr(0,4) == "http")
				{
					sitePath = url.substr(0,url.indexOf("/sync"));
					txtRes.text = "Начало загрузки";
					
					var urlReq:URLRequest = new URLRequest(url);
					
					var ul:URLLoader = new URLLoader();
					ul.dataFormat = URLLoaderDataFormat.BINARY;
					ul.load(urlReq);
					ul.removeEventListener(ProgressEvent.PROGRESS, progressHandler);
					ul.removeEventListener(Event.COMPLETE,LOAD_FILE_DONE);	
					ul.addEventListener(ProgressEvent.PROGRESS, progressHandler);
					ul.addEventListener(Event.COMPLETE,LOAD_FILE_DONE);		
					ul.removeEventListener(IOErrorEvent.IO_ERROR,errorLoadSyncFile);
					ul.addEventListener(IOErrorEvent.IO_ERROR,errorLoadSyncFile);
				}
				else
				{
					txtRes.text = url;
				}
			}
			private function progressHandler(event:ProgressEvent):void
			{
				this.txtRes.text = "Загружено:"
					+ " " + event.bytesLoaded.toString() + " " + "байт из"
					+ " " + event.bytesTotal.toString() + " " + "байт";
			}
			
			private function errorLoadSyncFile(e:IOErrorEvent):void
			{
				writeLog("Данные ещё не готовы");
			}
			
			private function LOAD_FILE_DONE(event:Event):void
			{
				txtRes.text = "Файл получен. Распаковка файла...";
				
				var loader:URLLoader = URLLoader(event.target);
				
				var inBA:ByteArray = loader.data as ByteArray;
				
				var reader:ZipFileReader = new ZipFileReader();
				var file:File = File.applicationStorageDirectory.resolvePath("sync.zip");
				var fs:FileStream = new FileStream();
				
				fs.open(file,FileMode.WRITE);
				fs.writeBytes(inBA,0,inBA.length);
				fs.close();
				
				reader.open(file);
				
				var list:Array = reader.getEntries();
				
				if (list.length > 0)
				{
					var entry:ZipEntry = list[0] as ZipEntry;					
					var ba:ByteArray = reader.unzip(entry);					
					var s:String = ba.readUTFBytes(ba.length);					
					var a:Array = s.split(";");
					
					largeAdjustAC = new ArrayCollection();
					
					for (var i:int=0;i<a.length;i++)
					{
						var bq:BatchQuery = new BatchQuery();
						bq.query = a[i] + ";";
						largeAdjustAC.addItem(bq);						
					}
					
					// clear
					reader.close();
					inBA.clear();
					inBA = null;
					ba.clear();
					ba = null;
					s = null;
					a = null;
					entry = null;
					list = null;
					
					// update settings
					var bqSettings:BatchQuery = new BatchQuery();
					bqSettings.query = "UPDATE ST_SETTINGS SET SET_GPS_TRACK_INTERVAL = " + 
						((Globals.GPS_TRACK_INTERVAL as Number)/60000).toString() +
						", " +
						"SET_SYNC_TIME_INTERVAL = " + 
						((Globals.SYNC_TIME_INTERVAL as Number)/60000).toString() + 
						", " +
						"SET_PASSWORD = '" + Globals.USE_PASSWORD + "'" +
						", " +
						"SET_USE_NAME = '" + Globals.USE_NAME + "'" +
						", " +
						"SET_PER_CODE = " + Globals.PER_CODE +
						", " +
						"SET_USE_CODE = " + Globals.USE_CODE + ";";
					largeAdjustAC.addItem(bqSettings);
					
					
					// run adjust operation
					Database.removeEventListener( CheckEvent.ADJUST_EVENT, SAVE_RESULT);
					Database.addEventListener(CheckEvent.ADJUST_EVENT, SAVE_RESULT, false, 0, true);				
					Database.removeEventListener(InsertProgressEvent.PROGRESS, insertProgress);
					Database.addEventListener(InsertProgressEvent.PROGRESS, insertProgress);
					txtRes.text = "Запись данных в локальную БД...";
					Database.ADJUST(largeAdjustAC);
				}
				else
				{
					//syncInProcess = false;
					this.txtRes.text = "Ошибка распаковки файла";
				}
			}
			private function insertProgress(e:InsertProgressEvent):void
			{
				this.txtRes.text = "Обработано" + ": " + e.status;
			}
			private function SAVE_RESULT(e:CheckEvent):void
			{
				Database.removeEventListener(CheckEvent.ADJUST_EVENT, SAVE_RESULT);
				largeAdjustAC = null;
				
				if (e.data > 0) 
				{
					this.txtRes.text = "Синхронизация основных справочников завершена";					
					LOAD_SURVEY_PHOTOS();		
				}
				else
				{
					writeLog("Ошибка записи в БД\n" + e.text);
				}
			}
			
			
			// ********************  DOWNLOAD VISIT PHOTOS FROM SERVER ************************************
			private function LOAD_SURVEY_PHOTOS():void
			{
				Globals.loadingShow("Медиа","Актуализация медиа файлов...");
				this.txtRes.text = "Актуализация медиа файлов. Пожалуйста, подождите...";
				writeLog("Актуализация медиа файлов");
				
				Database.removeEventListener( QueryEvent.DATA_LOADED, getAnswerPhotosDbHandler);
				Database.addEventListener(QueryEvent.DATA_LOADED, getAnswerPhotosDbHandler, false, 0, true);
				Database.init(QueryConstructor.buildGetMediaFilesList());	
			}			
			private function getAnswerPhotosDbHandler(e:QueryEvent):void
			{
				Database.removeEventListener(QueryEvent.DATA_LOADED, getAnswerPhotosDbHandler);
				if (e.data.length > 0)
				{
					imageCounter = 0;
					imageAC = e.data;
					imageQnt = e.data.length;
					pullPhotosFromServer();
				}
				else
				{
					END_SYNC();
				}
			}
			
			private function pullPhotosFromServer():void
			{
				if (imageCounter < imageQnt)
				{
					var file:File = File.documentsDirectory.resolvePath(Globals.MEDIA_FILES_FOLDER_PATH + "/" + imageAC.getItemAt(imageCounter).IMG_NAME);
					
					if (file.exists)
					{
						imageCounter++;
						pullPhotosFromServer();
					}
					else
					{
						//var urlReq:URLRequest = new URLRequest(Globals.SERVER_URL + "/PROMO/BY/photo/" + imageAC.getItemAt(imageCounter).IMG_FOLDER + "/" + imageAC.getItemAt(imageCounter).IMG_NAME);				
						//var s:String = Globals.SERVER_URL + "/photo/" + imageAC.getItemAt(imageCounter).IMG_FOLDER + "/" + imageAC.getItemAt(imageCounter).IMG_NAME;
						var urlReq:URLRequest = new URLRequest(sitePath + "/photo/" + imageAC.getItemAt(imageCounter).IMG_FOLDER + "/" + imageAC.getItemAt(imageCounter).IMG_NAME);
						var s:String = sitePath + "/photo/" + imageAC.getItemAt(imageCounter).IMG_FOLDER + "/" + imageAC.getItemAt(imageCounter).IMG_NAME;
						var ul:URLLoader = new URLLoader();
						ul.dataFormat = URLLoaderDataFormat.BINARY;
						ul.load(urlReq);
						ul.removeEventListener(ProgressEvent.PROGRESS, imageProgressHandler);
						ul.removeEventListener(Event.COMPLETE,LOAD_IMAGE_DONE);	
						ul.addEventListener(ProgressEvent.PROGRESS, imageProgressHandler);
						ul.addEventListener(Event.COMPLETE,LOAD_IMAGE_DONE);
					}					
				}
				else
				{
					txtRes.text = "Все изображения загружены";
					END_SYNC();
				}
			}
			
			private function imageProgressHandler(event:ProgressEvent):void
			{
				this.txtRes.text = "Медиа файл (" + (imageCounter+1).toString() + " из " + imageQnt.toString() + ") - " + imageAC.getItemAt(imageCounter).IMG_FOLDER + "/" + imageAC.getItemAt(imageCounter).IMG_NAME + "\n\n" +
					"Загружено:"
					+ " " + event.bytesLoaded.toString() + " " + "байт из"
					+ " " + event.bytesTotal.toString() + " " + "байт";
			}
			
			private function LOAD_IMAGE_DONE(event:Event):void
			{
				this.txtRes.text = "Загрузка медиа файлов (" + imageCounter.toString() + "/" + imageQnt.toString() + ")";
				
				var loader:URLLoader = URLLoader(event.target);
				
				var inBA:ByteArray = loader.data as ByteArray;
				
				var file:File = File.documentsDirectory.resolvePath(Globals.MEDIA_FILES_FOLDER_PATH + "/" + imageAC.getItemAt(imageCounter).IMG_NAME);
				var fs:FileStream = new FileStream();
				
				fs.open(file,FileMode.WRITE);
				fs.writeBytes(inBA,0,inBA.length);
				fs.close();
				
				imageCounter++;
				pullPhotosFromServer();
			}
			
			private function END_SYNC():void
			{
				// clean media files folder
				try
				{
					trace("file cleanup 1: " + Globals.CurrentDateTimeWithMinutesSecondsString());
					var storageDir:File = File.documentsDirectory.resolvePath(Globals.MEDIA_FILES_FOLDER_PATH);
					fileListSD = new ArrayCollection(storageDir.getDirectoryListing());
					
					
					trace("file cleanup 2: " + Globals.CurrentDateTimeWithMinutesSecondsString());

					/*
					for each (var i:int in storageDir.getDirectoryListing())
					{
						var allowDelete:Boolean = true;
						for each (var j:int in imageAC.source) 
						{
							if (storageDir.getDirectoryListing()[i].name == imageAC.source[j].IMG_NAME)
							{
								allowDelete = false;
								break;
							}
						}
						if (allowDelete)
						{
							var f:File = File.documentsDirectory.resolvePath(Globals.MEDIA_FILES_FOLDER_PATH + "/" + storageDir.getDirectoryListing()[i].name);
							f.deleteFile();
						}
					}
					*/
					
					
					for (var i:int=0;i<fileListSD.length;i++)
					{
						var allowDelete:Boolean = true;

						for (var j:int=0;j<imageAC.length; j++)
						{
							if (fileListSD.getItemAt(i).name == imageAC.getItemAt(j).IMG_NAME)
							{
								allowDelete = false;
								imageAC.removeItemAt(j);
								break;								
							}
						}

						if (allowDelete)
						{
							var f:File = File.documentsDirectory.resolvePath(Globals.MEDIA_FILES_FOLDER_PATH + "/" + fileListSD.getItemAt(i).name);
							f.deleteFile();
						}
					}
					
				} 
				catch (err:Error) { trace("DELETE MEDIA FILE ERROR: " + err.getStackTrace()); }
				trace("file cleanup 3: " + Globals.CurrentDateTimeWithMinutesSecondsString());
				
				// clean visit photos folder
				try
				{
					var visitPhotosDir:File = File.documentsDirectory.resolvePath(Globals.VISIT_PHOTOS_FOLDER_PATH);
					fileListSD = new ArrayCollection(visitPhotosDir.getDirectoryListing());
					
					for (var k:int=0;k<fileListSD.length;k++)
					{
						var fVisitPhoto:File = File.documentsDirectory.resolvePath(Globals.VISIT_PHOTOS_FOLDER_PATH + "/" + fileListSD.getItemAt(k).name);
						fVisitPhoto.deleteFile();
						fVisitPhoto.addEventListener(Event.COMPLETE, deleteCompleteHandler) 
						fVisitPhoto.deleteFileAsync(); 
						
						function deleteCompleteHandler(event:Event):void { 
							trace("Visit Photo Deleted: " + k.toString()) 
						} 
					}
				} 
				catch (errVisitPhoto:Error) { trace("DELETE VISIT PHOTO FILE ERROR: " + errVisitPhoto.getStackTrace()); }
				trace("file cleanup 4: " + Globals.CurrentDateTimeWithMinutesSecondsString());
				
				Globals.loadingClose();
				
				// finish progress
				this.txtRes.text = "Все операции выполнены успешно";					
				
				GPSUtil.GPS_ARRAY = new ArrayCollection();

				// CLEAR LOG FILE IN USER DIRECTORY
				TextFile.write("TYPE;USE_CODE;PER_CODE;CODE;TEXT;DATETIME;APP_VERSION;" + File.lineEnding);
				TextFile.append("SYNC;" + Globals.USE_CODE + ";" + Globals.PER_CODE + ";" + 
					"S" + Globals.USE_IMEI + ";" + "Sync completed;" + Globals.CurrentDateTimeWithMinutesSecondsString() + ";" + Globals.VERSION_NUMBER + ";" + File.lineEnding);
				
				
				var setAdjArr:ArrayCollection = new ArrayCollection();
				var bqSettings:BatchQuery = new BatchQuery();
				bqSettings.query = "UPDATE ST_SETTINGS SET SET_LAST_SYNC = '" + Globals.CurrentDateTimeWithMinutesSecondsString() + "';"; 
				setAdjArr.addItem(bqSettings);
				Database.addEventListener(CheckEvent.ADJUST_EVENT, WRITE_SETTINGS_SYNC_DATE_RESULT, false, 0, true);
				Database.ADJUST(setAdjArr);
			}
			
			
			private function WRITE_SETTINGS_SYNC_DATE_RESULT(e:CheckEvent):void
			{
				Database.removeEventListener(CheckEvent.ADJUST_EVENT, WRITE_SETTINGS_SYNC_DATE_RESULT);
				if (e.data > 0)
				{
					try
					{
						//writeSettingsController.turnOffWIFI();
					} catch (err:Error) {}
					
					NativeApplication.nativeApplication.systemIdleMode = SystemIdleMode.NORMAL;
					//navigator.pushView(MainMenu,null,null,moveBack);
					Globals.showOkDialog("Синхронизация","Синхронизация успешно завершена");
					dispatchEvent(new MainNavEvent(MainNavEvent.BACK_EVENT,true,true));
				}
				else
				{
					//syncInProcess = false;
					this.txtRes.text = "Ошибка при записи настроек: " + e.text;
				}
			}
			
			
			/* ===============================================			
			WRITE LOG MESSAGES			
			=================================================*/	
			private function writeLog(message:String):void
			{
				var messageObj:Object = new Object();
				messageObj["ITEM_NAME"] = Globals.CurrentDateTimeWithMinutesSecondsString();
				messageObj["ITEM_DESC"] = message;
				acLogMessages.addItemAt(messageObj,0);
				acLogMessages.refresh();
			}
			
			
			/* ===============================================			
			SHOW LOG RECORD		
			=================================================*/
			protected function lstSyncLog_clickHandler(event:MouseEvent):void
			{
				if (lstSyncLog.selectedIndex > -1) {
					Globals.showOkDialog(lstSyncLog.selectedItem.ITEM_NAME,lstSyncLog.selectedItem.ITEM_DESC);
				}
			}
			
			
			protected function vgroup2_creationCompleteHandler(event:FlexEvent):void
			{
				// stub
			}
			
		]]>
	</fx:Script>
	
	<system:TsaActionBar id="tsaActionBar" titleText="Синхронизация" backVisible="true" />
	
	<s:VGroup width="100%" height="100%" padding="5">			
		
		<components:ButtonIcon id="btnSyncApplication"
							   label="СИНХРОНИЗАЦИЯ"
							   width="100%"
							   height="10%"
							   brand="{BrandColorEnum.Primary}"
							   click="btnSyncApplication_clickHandler(event)"
							   visible="{!syncInProgress}" includeInLayout="{!syncInProgress}"/>
		
		<s:VGroup width="100%" height="10%" visible="{syncInProgress}" includeInLayout="{syncInProgress}"
				  verticalAlign="middle" horizontalAlign="center">
			<s:BusyIndicator />
		</s:VGroup>
		
		<s:Label id="txtRes" width="100%" textAlign="center" />
		
		<s:Panel title="Лог синхронизации" width="100%" height="90%">
			<s:List id="lstSyncLog"
					width="100%" height="100%"
					labelField="ITEM_NAME" 
					itemRenderer="renderers.SettingsRenderer"
					dataProvider="{acLogMessages}"
					click="lstSyncLog_clickHandler(event)"/>
		</s:Panel>			 
	</s:VGroup>	
</s:VGroup>
